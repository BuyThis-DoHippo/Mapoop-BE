plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'BuyThisDoHippo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'          // MVC
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	runtimeOnly 'com.mysql:mysql-connector-j'

	// WebClient만 쓰려고 webflux 추가 (reactive 서버는 아님)
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// JJWT: impl/jackson은 보통 runtimeOnly로 둡니다
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly   'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly   'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// OpenAI
	implementation 'com.openai:openai-java:3.0.2'
	implementation 'com.openai:openai-java-client-okhttp:3.0.2'

	// AWS SDK v2 — BOM으로 버전 정렬 (하단 platform 줄 중요)
	implementation platform('software.amazon.awssdk:bom:2.28.25')
	implementation 'software.amazon.awssdk:s3'
	// s3가 core/auth/regions를 끌어오므로 개별 선언은 보통 불필요합니다

	// .env
	implementation 'me.paulschwarz:spring-dotenv:4.0.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// OpenAI GPT API
	implementation 'com.openai:openai-java:3.0.2'
	implementation 'com.openai:openai-java-client-okhttp:3.0.2' // OkHttp 기반 클라이언트

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// (선택) Mac DNS 네이티브: 실 머신 아키텍처만 넣으세요
	if (System.getProperty('os.name').toLowerCase().contains('mac')) {
		def arch = System.getProperty('os.arch').toLowerCase().contains('aarch')
				? 'osx-aarch_64' : 'osx-x86_64'
		implementation "io.netty:netty-resolver-dns-native-macos:4.1.123.Final:${arch}"
	}
	// google geocoding api 사용
	implementation group: 'com.google.maps', name: 'google-maps-services', version: '2.2.0'
}


tasks.named('test') {
	useJUnitPlatform()
}
